# Dockerfile
# Use an official Node runtime as the base image
FROM node:alpine

ARG DATABASE_URL
ARG NEXTAUTH_SECRET
ARG GOOGLE_CLIENT_ID
ARG GOOGLE_CLIENT_SECRET
ARG SENDGRID_FROM_EMAIL
ARG SENDGRID_SMTP_USER
ARG SENDGRID_SMTP_KEY
ARG SENDGRID_SMTP_HOST
ARG SENDGRID_SMTP_PORT
ARG OPENAI_API_KEY
ARG PINECONE_API_KEY
ARG PINECONE_ENVIRONMENT
ARG PINECONE_INDEX

ENV DATABASE_URL=$DATABASE_URL
ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET
ENV GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
ENV GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
ENV SENDGRID_FROM_EMAIL=$SENDGRID_FROM_EMAIL
ENV SENDGRID_SMTP_USER=$SENDGRID_SMTP_USER
ENV SENDGRID_SMTP_KEY=$SENDGRID_SMTP_KEY
ENV SENDGRID_SMTP_HOST=$SENDGRID_SMTP_HOST
ENV SENDGRID_SMTP_PORT=$SENDGRID_SMTP_PORT
ENV OPENAI_API_KEY=$OPENAI_API_KEY
ENV PINECONE_API_KEY=$PINECONE_API_KEY
ENV PINECONE_ENVIRONMENT=$PINECONE_ENVIRONMENT
ENV PINECONE_INDEX=$PINECONE_INDEX

# Set the working directory in the container to /app
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install any needed packages specified in package.json
RUN npm install

# Bundle the app source inside the Docker image 
COPY . .
RUN npx prisma generate

# Make port 3000 available to the outside world
RUN npm run build

EXPOSE 3000

# Define the command to run the app
CMD ["npm", "run", "start"]
